#!/bin/bash 
if [[ $(command -v h) == '' ]]; then [[ $- != *i* ]] && return; if [[ $(command -v a) == '' && $BASH_SOURCE != *'/'* && $(grep 'cd;. a' .profile) == '' ]]; then echo 'cd;. a' >> .profile; echo 'cd;. a' >> .bashrc; fi; if [[ $(x=($(echo $BASH_SOURCE|sed 's/\// /g'));echo ${x[-1]}) != 'a' ]]; then mv $BASH_SOURCE $(dirname $(realpath $BASH_SOURCE))/a; fi; if [[ $(which sudo) == '' ]]; then alias sudo=''; fi; if [ -f /.jps1 ]; then export PS1='\[$(tput bold)\]\[$(tput setaf '$(cat /.jps1|awk '{print $1}')')\]\u@\h'$(cat /.jps1|awk '{print $2}')':\w\$\[$(tput sgr0)\] '; else export PS1='\u@\h:\w\$ '; fi; 
echo -e '\n'set\ {nu,ai} '\n'nmap\ {f\ gt,F\ gT,I\ gg,O\ G,m\ z.,K\ \<C-B\>,J\ \<C-F\>,r\ \<C-R\>,\,\ \:\%s\/\/\/gc,qq\ \:qa\<CR\>,0\ \^,\;\ \:set\ nu\!\<CR\>,noai\ \:set\ noai\<CR\>,t\ \:tabnew\<CR\>\:e} '\n'imap\ \<F2\>\ \<ESC\> '\n'{n,i}map\ \<F{8,9,10}\>\ \<ESC\>\:w!\<CR\> '\n'set\ {tabpagemax=999,laststatus=2,statusline+=%F}>~/.vimrc;_sc(){ local e=eval c=screen s=\'select;echo -e '\n'bindkey\ {{^[l,¬}\ $e\ next,{^[h,˙}\ $e\ prev,{^[t,†}\ $e\ $(echo $c\ {,,,,,,,,,}),{^[T,ˇ}\ $e\ $c,{^[/,÷}\ number,{^[c,^[x,ç}\ copy,{^[D,Î}\ detach,^[a\ windows,^[v\ paste\ .,{^[f,ƒ}\ $e\ $s\ 0\',{^[1,¡}\ $e\ $s\ 3\',{^[2,§}\ $e\ $s\ 6\',{^[3,£}\ $e\ $s\ 9\',{^[4,¢}\ $e\ $s\ 12\',{^[5,ª}\ $e\ $s\ 15\',{^[6,ﬂ}\ $e\ $s\ 18\',{^[7,¨}\ $e\ $s\ 21\',{^[8,ˆ}\ $e\ $s\ 24\',{^[9,Ø}\ $e\ $s\ 27\',{^[0,‚}\ $e\ $s\ 30\'} '\n'defscrollback\ 9999 '\n'maptimeout\ 0>~/.screenrc;};_sc; 
fi; export TERM=xterm; alias a='alias'; [ -f ax ] && . ax 2>/dev/null; 
a ll='ls -al'; a llt='ll -tr'; a lld='ll -d'; a py='python3'; a d='diff -s'; a pip='pip3'; a ..='cd ..'; a dd='date "+DATE: %Y-%m-%d%nTIME: %H:%M:%S"'; a cc='clear'; a chkport='nc -z -v -w5'; a jtree='tree -ahfniF --du --dirsfirst -o .tree'; a jcmp='cmp -l'; a _a='sudo apt-get -y'; a japtu='_a update;_a upgrade;_a dist-upgrade;_a autoremove;_a clean'; a vi='vim -p'; a jvisudo='sudo sh -c "echo $USER ALL=NOPASSWD:ALL>>/etc/sudoers"'; a rr='sudo su -l'; a ,='cd'; a rmr='pause;rm -rf'; a pyser='py -m http.server&'; a jskey='ssh-keygen -t rsa -f id_rsa'; a xx='chr=({a..z});x=$(date +%Y)-2020;x=${chr[$x]};x=${x}$(printf "%x" $((date +%m)|sed "s/^0*//"))$(date +%d);echo $x'; 
pause(){ read -rsp $"Press enter to continue... $*"$'\n\n';}; freeport(){ fuser -k $1/tcp;}; jkill(){ kill -9 $(pidof "$@");}; jhash(){ shasum -a 256 <(echo $1)|awk '{print $1}';}; jsocat(){ socat -d -d -lf ~/socat.log tcp4-listen:$2,bind=$1,reuseaddr,fork tcp4:$3:$4&:;}; jinlets(){ inlets client --url wss://$1.herokuapp.com --token $(jhash $2) --upstream $3&:;cc;}; log(){ y=$(echo $@ | sed "s/ /_/g;s/\//%/g");eval $@ |& tee log_$y; tss log_$y;}; ts(){ for x in $@;do mv $x "$(date +"%Y%m%d_%H%M%S")"_$x;done;}; tss(){ for x in $@;do mv $x ${x}_"$(date +"%Y%m%d_%H%M%S")";done;}; jfind(){ find ${2:-'.'} -name "$1" 2>/dev/null;}; jfindw(){ find . -type f -name "${2:-*}" -exec grep -q $1 {} \; -exec ls -al {} \+;}; jfindvi(){ find ${2:-.} -name "$1" -exec vim -p {} \+;}; jfindwvi(){ vi $(jfindw $1 $2 | awk '{print $9}');}; jfinddel(){ find ${2:-'.'} -name "$1" 2>/dev/null -exec sudo rm {} \;;}; jfindr(){ for x in $(find ${6:-.} -name "$1");do y="$2 $x $3 $(echo $x|sed s/${4/\./\\.}/${5/\./\\.}/g)";echo $y;eval $y;done;}; LL(){ if [[ $1 == '.' ]]; then eval echo $(pushd)|awk '{print $1}'; return; fi; pushd $1>/dev/null;ll;}; te(){ for i in $@;do tar -jpcf $i.jbz2 $i;done;}; td(){ for i in $@;do tar -jpxvf $i;done;}; mkcd(){ mkdir $1;cd $1;}; s(){ [ ! -f $1 ]&&x=~/$1||x=$1;. $(realpath $x) ${@:2};}; jrsync(){ rsync -avzP -e ssh $1:$2 .;}; jjq(){ ([[ $3 == '' ]]&&cat $1|jq $2)||((cat $1|jq $2)>$1.x&&mv $1.x $1);}; sr(){ local s t a b n i;s=$(eval echo $(cat $1));t=$(echo $s|sed 's/\//\|/g');a=($s);b=($t);n=${#a[@]};if [[ $2 == '' ]];then echo $s;elif [[ $2 == 'v' ]];then vi $s;elif [[ $2 == 's' ]];then for ((i=0;i<n;i++));do cp ${a[$i]} ${b[$i]};done;elif [[ $2 == 'r' ]];then for ((i=0;i<n;i++));do cp ${b[$i]} ${a[$i]};done;fi;}; 
a jgu='echo -e "[user]\nemail=jamessheen@users.noreply.github.com\nname=j\n[alias]\nst=status">~/.gitconfig;git add .;git commit -am "update";git diff --name-only $(git rev-parse --abbrev-ref HEAD) origin/$(git rev-parse --abbrev-ref HEAD);pause;git push'; a gitrmc='git rm -r --cached'; a gitgc='git gc --prune=all'; 
gitclone(){ git clone $(curl -sL -o /dev/null -w %{url_effective} $1);}; gitx(){ if [[ $1 == '' ]]; then git ls-files -v|grep ^h; elif [[ $1 == '.' && $2 == '.' ]]; then git update-index --no-assume-unchanged $(git ls-files); elif [[ $1 == '.' ]]; then git update-index --assume-unchanged $(git ls-files); elif [[ $2 == '.' ]]; then git update-index --no-assume-unchanged $1; else git update-index --assume-unchanged $1; fi;}; 
a jdi='docker images'; a jdp='docker ps -a'; a jdocins='docker inspect'; a jdocnet='docker network'; a jdocsta='docker stats --no-stream'; a jdocipk3s='jdocip k3d-k3s-default-server-0'; a jdocexe='docker exec -it'; a jdocrmv='docker volume rm $(docker volume ls -qf dangling=true)'; a jdocrma='docker ps -a;pause;docker rm -f $(docker ps -aq) 2>/dev/null;jdocrmv 2>/dev/null'; 
jdr(){ docker run -it -v $(realpath $PWD):/root $@;}; jde(){ docker exec -it $@ bash;}; jdocip(){ docker inspect --format="{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" $1;}; jdrr(){ if [[ $(which docker) == "" ]];then sudo apt-get update;sudo apt-get install -y docker.io;sudo chmod 666 /var/run/docker.sock;fi;docker run -it -v $(realpath $PWD):/${2:-root} -v /var/run/docker.sock:/var/run/docker.sock --name js --network host ${@:3} $( ([[ $1 == '' ]] && echo 'js72/js') || ([[ $1 == '.' ]] && echo '--gpus all js72/js') || echo $1);}; jdocu(){ x=${1:-js};jdrr ${2:-ubuntu:20.04};docker commit js js72/$x;docker tag js72/$x js72/$x:$(xx);docker login -u js72;docker push -a js72/$x;docker logout;docker rmi js72/$x:$(xx);jdi;}; 
a jk3dc='k3d cluster'; a jk3dcc='jk3dc create'; a jk3dcd='jk3dc delete'; a jk3dcl='jk3dc list'; a jk3dn='k3d node'; a jk3dnc='jk3dn create'; a jk3dnd='jk3dn delete'; a jk3dnl='jk3dn list'; 
jk3d(){ jk3dcc -a ${1:-2} --k3s-server-arg --no-deploy --k3s-server-arg traefik;kubectl create ns js;}; 
a jkub='kubectl'; a jkubget='jkub get'; a jkubg='echo -e "===\n";jkub get svc,nodes,pod -A -o wide'; a jkubdes='jkub describe'; a jkubeve='jkub get events'; a jkubdel='jkub delete'; a jkubdelnam='jkubdel namespace'; a jkubevenam='jkubeve --namespace'; a jkubns='jkub config view | grep namespace'; a jkubgetdep='jkub get deployments -A -o wide'; a jkubdelall='echo "$(jkubns)";pause;jkubdel deployments,service,pod --all;jkubdelnam $(jkubns | sed "s/namespace: //g")'; a jkubcre='jkub create'; a jkubcredep='jkubcre deployment'; a jkubreg='jkubcre ns js;jkubcredep registry --image=registry:latest --port=5000 -n js;kubectl expose deployment registry -n js --type=LoadBalancer --port=5000 --target-port=5000;jsocat localhost 5000 $(jdocipk3s) 5000'; a jkubgetpvc='jkub get pvc -A'; a jkubgetnam='jkubget namespace'; a jkubapires='kubectl api-resources | grep'; a jkublog='jkub logs'; 
jkubnns(){ kubectl config set-context --current --namespace $1;jkubns;}; jkubproxy(){ if [[ $1 == '.' ]]; then kubectl proxy -p 8080&:; else curl http://localhost:8080/$1; fi;}; 

